#include <bits/stdc++.h>
using namespace std;
// printing true if tree is heiht balanced difference b/w height of left
//subtree  and right tree should not be more than 1
// 0(n^2 approach)
struct Node  
{ 
  int key; 
  struct Node *left; 
  struct Node *right; 
  Node(int k){
      key=k;
      left=right=NULL;
  }
};
int height(Node* root){
    if(root==NULL)
        return 0;
    return 1+max(height(root->left),height(root->right));
}
bool heightBalanced(Node* root ){
    if(root==NULL)
            return true;
    int lh=height(root->left);
    int rh=height(root->right);
    return (abs(lh-rh)<=1) && heightBalanced(root->left) && heightBalanced(root->right);
}
   
   
int main() {
	Node *root=new Node(10);
	root->left=new Node(20);
	root->right=new Node(30);
    root->left->left=new Node(40);
 	root->left->right=new Node(50);
 	root->right->right=new Node(70);
 	root->right->right->right=new Node(80);
    cout<<heightBalanced(root);
    return 0;
}